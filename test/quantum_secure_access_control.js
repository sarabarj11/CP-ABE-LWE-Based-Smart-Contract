const QuantumSecureAccessControl = artifacts.require('QuantumSecureAccessControl');

contract('QuantumSecureAccessControl', (accounts) => {
    const owner = accounts[0];
	let contract;

    before(async () => {
        contract = await QuantumSecureAccessControl.deployed();
    });
	
	
	it('should store the public for the service', async () => {
		const publicKey = '{"service": "Dermatology", "Name": [[[3, 3, 0, 1], [3, 1, 2, 0]], 5, [[4.0], [0.0]]], "Dermatological records": [[[0, 2, 0, 0], [3, 0, 1, 2]], 5, [[4.0], [4.0]]]}';
		const service1 = accounts[1];
		const name1 = 'Dermatology';
        const transaction = await contract.setPublicKey(service1, name1, publicKey, { from: accounts[1] });
        assert.equal(transaction.logs.length, 1, 'Event not emitted');
        const event = transaction.logs[0];
        assert.equal(event.event, 'PublicKeyGenerated', 'Event name is incorrect');
        assert.equal(event.args.service, accounts[1], 'Service address is incorrect');
        assert.equal(event.args.publicKey, publicKey, 'public key is incorrect');
        assert.equal(event.args.serviceName, name1, 'Service name is incorrect');
    });
	
	it('should retreive the public key', async () => {
			
		const service = accounts[1];
			
		const publicKey = await contract.getPublicKey(service);
		assert.equal(publicKey, '{"service": "Dermatology", "Name": [[[3, 3, 0, 1], [3, 1, 2, 0]], 5, [[4.0], [0.0]]], "Dermatological records": [[[0, 2, 0, 0], [3, 0, 1, 2]], 5, [[4.0], [4.0]]]}', 'public key should be retreived');
		
	});
	
    it('should set user attributes', async () => {
		const userAddress = accounts[2];
        const service = 'Dermatology';
        const encryptedAttributes = '{"Name": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0]], [[3], [3], [0], [1]]], "Dermatological records": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0]], [[0], [2], [0], [0]]]}';
		const transaction = await contract.setUserAttributes(userAddress, service, encryptedAttributes, { from: accounts[2] });
		assert.equal(transaction.logs.length, 1, 'Event not emitted');
        const event = transaction.logs[0];
        assert.equal(event.event, 'UserGenerated', 'Event name is incorrect');
        assert.equal(event.args.user, accounts[2], 'User address is incorrect');
        assert.equal(event.args.encryptedAttributes, encryptedAttributes, 'Encrypted attributes are incorrect');
    });
	
	
    it('should grant access', async () => {
        const userAddress = accounts[2];
        const service = 'Dermatology';
        const data = '{"Name": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0]], [[3], [3], [0], [1]]], "Dermatological records": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0]], [[0], [2], [0], [0]]]}';
		const transaction = await contract.grantAccess(userAddress, service, data, { from: accounts[2] });
        assert.equal(transaction.logs.length, 1, 'Event not emitted');
        const event = transaction.logs[0];
        assert.equal(event.event, 'GrantedAccess', 'Event name is incorrect');
        assert.equal(event.args.user, userAddress, 'User address is incorrect');
        assert.equal(event.args.serviceName, service, 'Service name is incorrect');
        assert.equal(event.args.encryptedAttributes, data, 'Access granted data is incorrect');
    });

	it('should check access', async () => {
		const userAddress = accounts[2];
		const service = 'Dermatology';
		const encryptedAttributes = '{"Name": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0]], [[3], [3], [0], [1]]], "Dermatological records": [[[4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 4.0, 1.0, 4.0, 4.0, 4.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 4.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 4.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0], [4.0, 1.0, 1.0, 4.0, 1.0, 4.0, 4.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0], [4.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0], [4.0, 1.0, 1.0, 1.0, 4.0, 4.0, 1.0, 1.0], [4.0, 4.0, 1.0, 4.0, 1.0, 1.0, 1.0, 4.0]], [[0], [2], [0], [0]]]}';
		const hasAccess = await contract.hasAccess(userAddress, service);
		assert.equal(hasAccess, encryptedAttributes, 'Access should be granted');
    });
	
	
	it('should revoke access', async () => {
        const userAddress = accounts[2];
        const service = 'Dermatology';        
        const transaction = await contract.revokeAccess(userAddress, service, { from: accounts[2] });
        assert.equal(transaction.logs.length, 1, 'Event not emitted');
        const event = transaction.logs[0];
        assert.equal(event.event, 'RevokedAccess', 'Event name is incorrect');
        assert.equal(event.args.user, userAddress, 'User address is incorrect');
        assert.equal(event.args.serviceName, service, 'Service name is incorrect');
	});
	
	it('should check access', async () => {
			const userAddress = accounts[2];
			const service = 'Dermatology';
			const hasAccess = await contract.hasAccess(userAddress, service);
			assert.equal(hasAccess, "", 'Access should be granted');
    });
});